@page "/Artistas"
@inject ArtistaAPI artistaAPI
@inject IDialogService dialogService
@inject ISnackbar Snackbar

<MudStack Class="mt-4 mb-4" Row="true" Justify="Justify.SpaceBetween">
    <MudText Class="mb-4" Typo="Typo.h4">Artistas cadastrados</MudText>
    <MudPagination Count="@totalPaginas" SelectedChanged="PaginaMudou"></MudPagination>
</MudStack>

@if (artistasDaPagina is not null)
{
    <MudGrid>
    @foreach (var artista in artistasDaPagina)
    {
        <MudItem xs="3">
                <CardArtista Artista=artista BotaoExcluirClicado="OnClickHandler" />
         </MudItem>
    }
    </MudGrid>
} else
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

@code {
    private int tamanho = 8;
    private int totalItens;
    private int totalPaginas;
    private ICollection<ArtistaResponse>? artistasDaPagina;
    private ICollection<ArtistaResponse>? listaCompleta = Enumerable.Empty<ArtistaResponse>().ToList();

    private async Task OnClickHandler(ArtistaResponse artista)
    {
        var parameters = new DialogParameters<ScreenSoundDialog>();
        parameters.Add(d => d.Conteudo, $"Deseja realmente excluir o artista {artista.Nome}? ");
        parameters.Add(d => d.TextoBotao, "Excluir");
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await dialogService.ShowAsync<ScreenSoundDialog>("Excluir Artista", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await artistaAPI.DeleteArtistaAsync(artista.Id);
            Snackbar.Add("Artista excluído com sucesso!", Severity.Success);
            await this.AtualizarLista();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await this.AtualizarLista();
    }

    private async Task AtualizarLista() 
    {
        listaCompleta = await artistaAPI.GetArtistasAsync();
        if (listaCompleta is not null)
        {
            listaCompleta = listaCompleta.OrderByDescending(a => a.Id).ToList();
            totalItens = listaCompleta.Count();
            totalPaginas = Convert.ToInt32(Math.Ceiling((totalItens * 1.0) / tamanho));
            this.PaginaMudou(1);
        }
    }

    private void PaginaMudou(int pageNumber)
    {
        var indice = pageNumber - 1;
        artistasDaPagina = listaCompleta!
            .Skip(tamanho * indice)
            .Take(tamanho)
            .ToList();
    }
}
