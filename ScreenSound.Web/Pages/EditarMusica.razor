@page "/EditarMusica/{NomeMusica}"
@inject MusicaAPI musicaAPI
@inject ArtistaAPI artistaAPI
@inject GeneroAPI generoAPI
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Editar de Música</MudText>

    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">

        <MudTextField Class="mt-4" T="string" Placeholder="Nome da música/canção"
                      @bind-Value="nome"
                      Variant="Variant.Outlined"
                      Required="true"
                      RequiredError="Campo obrigatório." />

        <MudTextField Class="mt-4" T="string" Placeholder="Nome do artista"
                      @bind-Value="nomeArtista"
                      Variant="Variant.Outlined"
                      Lines="1"
                      Required="true"
                      RequiredError="Campo obrigatório." />

        <MudTextField Class="mt-4" T="string" Placeholder="Ano de lançamento"
                      @bind-Value="anoLancamento"
                      Variant="Variant.Outlined"
                      Lines="1"
                      Required="true"
                      RequiredError="Campo obrigatório." />

        <MudSelect Class="mt-4" T="GeneroResponse" ValueChanged="@GeneroOnValueChanged" Label="Gêneros" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
            @if (Generos is not null)
            {
                @foreach (var item in Generos!)
                {
                    <MudSelectItem Value=item />
                }
            }
            @if (GenerosSelecionados is not null)
            {
                <br />
                foreach (var item in GenerosSelecionados)
                {
                    <MudAlert Severity="Severity.Info">@(item.Nome) adicionado como gênero.</MudAlert>
                }

            }
        </MudSelect>

        <div class="d-flex align-center justify-space-between mt-4">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Disabled="@(!success)"
                       Class="ml-auto"
                       @onclick="Editar">
                Salvar
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Warning"
                       Class="ml-3"
                       @onclick="Deletar">
                Excluir
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Info"
                       Class="ml-3"
                       @onclick="VoltarParaListagem">
                Voltar
            </MudButton>
        </div>

    </MudForm>

</MudPaper>

@code {
    bool success;
    string[] errors = { };
    MudForm? form;
    //campos da tela
    private string? nome;
    private string? nomeArtista;
    private string? anoLancamento;
    private ICollection<GeneroResponse>? Generos { get; set; }

    [Parameter]
    public string? NomeMusica { get; set; }

    public MusicaResponse? Musica { get; set; }
    private List<GeneroResponse>? GenerosSelecionados { get; set; } = new();
    private GeneroResponse? GeneroSelecionado { get; set; }
    private List<GeneroRequest> GenerosRequest { get; set; } = new();



    private void VoltarParaListagem()
    {
        navigationManager.NavigateTo("/MusicasPorArtista");
    }
    protected override async Task OnInitializedAsync()
    {
        Generos = await generoAPI.GetGenerosAsync();
        Musica = await musicaAPI.GetMusicaPorNomeAsync(NomeMusica!);
        if (Musica is null)
        {
            Snackbar.Add("Música consultado não encontrado.", Severity.Error);
            navigationManager.NavigateTo("/MusicasPorArtista");
        }
        nome = Musica!.Nome;
        nomeArtista = Musica!.NomeArtista;
        anoLancamento = Musica!.anoLancamento.ToString();
        if (Musica!.Generos is not null)
        {
          GenerosSelecionados = Musica!.Generos.ToList();
        }
       
    }

    private async Task Editar()
    {
        try
        {
            if (GenerosSelecionados is not null)
            {
                foreach (var item in GenerosSelecionados)
                {
                    GenerosRequest.Add(new GeneroRequest(item.Nome, item.Descricao));
                }
            }
            var requestEdit = new MusicaRequestEdit(Musica!.Id, nome!, Musica.ArtistaId, int.Parse(anoLancamento!), GenerosRequest);
            await musicaAPI.UpdateMusicaAsync(requestEdit);
            Snackbar.Add("Música atualizado com sucesso!", Severity.Success);
            navigationManager.NavigateTo("/MusicasPorArtista");
        }
        catch (Exception ex)
        {
            var options = new DialogOptions { CloseOnEscapeKey = true };
            var parameters = new DialogParameters<AlertDialog>();
            parameters.Add(x => x.ButtonText, "Ok");
            parameters.Add(x => x.Color, Color.Error);
            parameters.Add(x => x.ContentText, $"{ex.Message}.");
            DialogService.Show<AlertDialog>("Alerta", parameters, options);
            return;
        }

    }

    private async Task Deletar()
    {
        try
        {
            await musicaAPI.DeleteMusicaAsync(Musica!.Id);
            Snackbar.Add("Música excluída com sucesso!", Severity.Success);
            navigationManager.NavigateTo("/MusicasPorArtista");
        }
        catch (Exception ex)
        {
            var options = new DialogOptions { CloseOnEscapeKey = true };
            var parameters = new DialogParameters<AlertDialog>();
            parameters.Add(x => x.ButtonText, "Ok");
            parameters.Add(x => x.Color, Color.Error);
            parameters.Add(x => x.ContentText, $"{ex.Message}.");
            DialogService.Show<AlertDialog>("Alerta", parameters, options);
            return;
        }

    }

    private void GeneroOnValueChanged(GeneroResponse generoSelecionado)
    {
        if (GenerosSelecionados is not null)
        {
            if (!GenerosSelecionados.Contains(generoSelecionado))
            {
                GenerosSelecionados!.Add(generoSelecionado);
            }
        }
    }

}
